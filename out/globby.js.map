{
  "version": 3,
  "file": "globby.js",
  "sourceRoot": "",
  "sources": [
    "../src/globby.ts"
  ],
  "names": [],
  "mappings": ";;;;AAAA,2BAA2C,AAAU,AACrD,AAAC;AAAD,uBAA8B,AAAM,AAEpC,AAAmC,AACnC,AAAC;;AAAD,MAAM,AAAS,YAAG,AAAO,QAAC,AAAW,AAAC;AAEtC,oBAAoB,AAAe;AACjC,AAAM,WAAC,AAAO,QAAC,AAAC,AAAC,OAAK,AAAG,AAC3B;AAAC;AAED,2BAA2B,AAAuB,UAAE,AAAa;AAC/D,AAAI,WAAG,AAAM,OAAC,AAAM,OAAC,EAAC,AAAM,QAAE,AAAE,AAAC,MAAE,AAAI,AAAC;AAExC,UAAM,AAAS,YAAe,AAAE;AAChC,AAAQ,aAAC,AAAO,QAAC,UAAU,AAAO,SAAE,AAAC;AACnC,AAAE,AAAC,YAAC,AAAU,WAAC,AAAO,AAAC,AAAC,UAAC,AAAC;AACxB,AAAM,AACR;AAAC;AAED,cAAM,AAAM,SAAG,AAAQ,SAAC,AAAK,MAAC,AAAC,AAAC,GAAC,AAAM,OAAC,AAAU,AAAC,YAAC,AAAG,IAAC,AAAE,MAAI,AAAE,GAAC,AAAK,MAAC,AAAC,AAAC,AAAC;AAC1E,AAAS,kBAAC,AAAI;AACZ,AAAO,qBAAE,AAAO;AAChB,AAAI,yBAAS,AAAM,OAAC,AAAE,IAAE,AAAI;AAC1B,AAAM,wBAAkB,AAAI,KAAC,AAAO,OAAC,AAAM,OAAC,AAAM,AAAC,AACpD,AAAC,AACH,AAAC,AACJ;AAJkC,aAAxB,AAAM;AAFC;AAMhB,AAAC;AACF,AAAM,WAAC,AAAS,AAClB;AAAC;AAED,gBAAuB,AAAuB,UAAE,AAAa;AAC3D,QAAI,AAAS,YAAgB,AAAI;AACjC,AAAM,sBAAgB,QACnB,AAAG,IAAC,AAAiB,kBAAC,AAAQ,UAAE,AAAI,AAAC,OAAE,AAAI,YAAQ,WAAe,QAAC,CAAC,AAAO,SAAE,AAAM;AAClF,YAAI,AAAI,WAAO,OAAI,KAAC,AAAI,KAAC,AAAO,SAAE,AAAI,KAAC,AAAI,MAAE,CAAC,AAAK,OAAE,AAAO;AAC1D,AAAE,AAAC,gBAAC,AAAK,SAAI,AAAI,AAAC,MAAC,AAAC;AAClB,AAAO,wBAAC,AAAO,AAAC,AAClB;AAAC,AACD,AAAI,mBAAC,AAAC;AACJ,AAAM,uBAAC,AAAK,AAAC,AACf;AAAC,AACH;AAAC,AAAC,SAPS;AASX,AAAE,AAAC,YAAC,AAAS,aAAI,AAAI,AAAC,MAAC,AAAC;AACtB,AAAS,wBAAG,AAAI,AAClB;AAAC,AACD,AAAI,eAAC,AAAC;AACJ,AAAI,iBAAC,AAAS,YAAG,AAAS,UAAC,AAAS;AACpC,AAAI,iBAAC,AAAQ,WAAG,AAAS,UAAC,AAAQ;AAClC,AAAI,iBAAC,AAAa,gBAAG,AAAS,UAAC,AAAa;AAC5C,AAAI,iBAAC,AAAK,QAAG,AAAS,UAAC,AAAK,AAC9B;AAAC,AACH;AAAC,AAAC,AAAC,KAnB6C,GAoB/C,AAAI;AAAC,AAAE;;eAAI,IAAI,AAAG,IAAC,AAAE,YAAC,AAAM,AAAC,sCAAG,AAAE,AAAC,AAAC,AAAC,AAC1C;KAtBS;AAsBR;AAxBe,QAAM,SAwBrB",
  "sourcesContent": [
    "import { Promise as BluebirdPromise } from \"bluebird\"\nimport { Glob, Options } from \"glob\"\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"./awaiter\")\n\nfunction isNegative(pattern: string): boolean {\n  return pattern[0] === \"!\"\n}\n\nfunction generateGlobTasks(patterns: Array<string>, opts: Options): Array<any> {\n  opts = Object.assign({ignore: []}, opts)\n\n  const globTasks: Array<any> = []\n  patterns.forEach(function (pattern, i) {\n    if (isNegative(pattern)) {\n      return\n    }\n\n    const ignore = patterns.slice(i).filter(isNegative).map(it => it.slice(1))\n    globTasks.push({\n      pattern: pattern,\n      opts: Object.assign({}, opts, {\n        ignore: (<Array<string>>opts.ignore).concat(ignore)\n      })\n    })\n  })\n  return globTasks\n}\n\nexport function globby(patterns: Array<string>, opts: Options): Promise<Set<string>> {\n  let firstGlob: Glob | null = null\n  return BluebirdPromise\n    .map(generateGlobTasks(patterns, opts), task => new BluebirdPromise((resolve, reject) => {\n      let glob = new Glob(task.pattern, task.opts, (error, matches) => {\n        if (error == null) {\n          resolve(matches)\n        }\n        else {\n          reject(error)\n        }\n      })\n\n      if (firstGlob == null) {\n        firstGlob = glob\n      }\n      else {\n        glob.statCache = firstGlob.statCache\n        glob.symlinks = firstGlob.symlinks\n        glob.realpathCache = firstGlob.realpathCache\n        glob.cache = firstGlob.cache\n      }\n    }))\n    .then(it => new Set([].concat(...it)))\n}"
  ]
}
