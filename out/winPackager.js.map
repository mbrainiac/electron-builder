{
  "version": 3,
  "file": "winPackager.js",
  "sourceRoot": "",
  "sources": [
    "../src/winPackager.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { downloadCertificate } from \"./codeSign\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport { PlatformPackager, BuildInfo, smarten, getArchSuffix } from \"./platformPackager\"\nimport { Platform, WinBuildOptions, Arch } from \"./metadata\"\nimport * as path from \"path\"\nimport { log, warn } from \"./util\"\nimport { deleteFile, emptyDir, open, close, read } from \"fs-extra-p\"\nimport { sign, SignOptions } from \"signcode-tf\"\nimport { ElectronPackagerOptions } from \"electron-packager-tf\"\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"./awaiter\")\n\ninterface FileCodeSigningInfo {\n  readonly file: string\n  readonly password?: string | null\n}\n\nexport class WinPackager extends PlatformPackager<WinBuildOptions> {\n  private readonly cscInfo: Promise<FileCodeSigningInfo | null>\n\n  private readonly iconPath: Promise<string>\n\n  constructor(info: BuildInfo, cleanupTasks: Array<() => Promise<any>>) {\n    super(info)\n\n    const certificateFile = this.customBuildOptions.certificateFile\n    if (certificateFile != null) {\n      const certificatePassword = this.customBuildOptions.certificatePassword || this.getCscPassword()\n      this.cscInfo = BluebirdPromise.resolve({\n        file: certificateFile,\n        password: certificatePassword == null ? null : certificatePassword.trim(),\n      })\n    }\n    else if (this.options.cscLink != null) {\n      this.cscInfo = downloadCertificate(this.options.cscLink)\n        .then(path => {\n          cleanupTasks.push(() => deleteFile(path, true))\n          return {\n            file: path,\n            password: this.getCscPassword(),\n          }\n        })\n    }\n    else {\n      this.cscInfo = BluebirdPromise.resolve(null)\n    }\n\n    this.iconPath = this.getValidIconPath()\n  }\n\n  get platform() {\n    return Platform.WINDOWS\n  }\n\n  protected get supportedTargets(): Array<string> {\n    return []\n  }\n\n  private async getValidIconPath(): Promise<string> {\n    const iconPath = path.join(this.buildResourcesDir, \"icon.ico\")\n    await checkIcon(iconPath)\n    return iconPath\n  }\n\n  async pack(outDir: string, arch: Arch, targets: Array<string>, postAsyncTasks: Array<Promise<any>>): Promise<any> {\n    if (arch === Arch.ia32) {\n      warn(\"For windows consider only distributing 64-bit, see https://github.com/electron-userland/electron-builder/issues/359#issuecomment-214851130\")\n    }\n\n    // we must check icon before pack because electron-packager uses icon and it leads to cryptic error message \"spawn wine ENOENT\"\n    await this.iconPath\n\n    const appOutDir = this.computeAppOutDir(outDir, arch)\n    const packOptions = this.computePackOptions(outDir, appOutDir, arch)\n\n    if (!targets.includes(\"default\")) {\n      await this.doPack(packOptions, outDir, appOutDir, arch, this.customBuildOptions)\n      return\n    }\n\n    const installerOut = computeDistOut(outDir, arch)\n    await BluebirdPromise.all([\n      this.doPack(packOptions, outDir, appOutDir, arch, this.customBuildOptions),\n      emptyDir(installerOut)\n    ])\n\n    postAsyncTasks.push(this.packageInDistributableFormat(appOutDir, installerOut, arch, packOptions))\n  }\n\n  protected computeAppOutDir(outDir: string, arch: Arch): string {\n    return path.join(outDir, `win${getArchSuffix(arch)}-unpacked`)\n  }\n\n  protected async doPack(options: ElectronPackagerOptions, outDir: string, appOutDir: string, arch: Arch, customBuildOptions: WinBuildOptions) {\n    await super.doPack(options, outDir, appOutDir, arch, customBuildOptions)\n    await this.sign(appOutDir)\n  }\n\n  protected async sign(appOutDir: string) {\n    const cscInfo = await this.cscInfo\n    if (cscInfo != null) {\n      const filename = `${this.appName}.exe`\n      log(`Signing ${filename} (certificate file \"${cscInfo.file}\")`)\n      await this.doSign({\n        path: path.join(appOutDir, filename),\n        cert: cscInfo.file,\n        password: cscInfo.password!,\n        name: this.appName,\n        site: await this.computePackageUrl(),\n        overwrite: true,\n        hash: this.customBuildOptions.signingHashAlgorithms,\n      })\n    }\n  }\n\n  protected async doSign(opts: SignOptions): Promise<any> {\n    return BluebirdPromise.promisify(sign)(opts)\n  }\n\n  protected async computeEffectiveDistOptions(appOutDir: string, installerOutDir: string, packOptions: ElectronPackagerOptions, setupExeName: string): Promise<WinBuildOptions> {\n    let iconUrl = this.customBuildOptions.iconUrl || this.devMetadata.build.iconUrl\n    if (iconUrl == null) {\n      if (this.info.repositoryInfo != null) {\n        const info = await this.info.repositoryInfo.getInfo(this)\n        if (info != null) {\n          iconUrl = `https://github.com/${info.user}/${info.project}/blob/master/${this.relativeBuildResourcesDirname}/icon.ico?raw=true`\n        }\n      }\n\n      if (iconUrl == null) {\n        throw new Error(\"iconUrl is not specified, please see https://github.com/electron-userland/electron-builder/wiki/Options#WinBuildOptions-iconUrl\")\n      }\n    }\n\n    checkConflictingOptions(this.customBuildOptions)\n\n    const projectUrl = await this.computePackageUrl()\n    const rceditOptions = {\n      \"version-string\": packOptions[\"version-string\"],\n      \"file-version\": packOptions[\"build-version\"],\n      \"product-version\": packOptions[\"app-version\"],\n    }\n    rceditOptions[\"version-string\"]!.LegalCopyright = packOptions[\"app-copyright\"]\n\n    const cscInfo = await this.cscInfo\n    const options: any = Object.assign({\n      name: this.metadata.name,\n      productName: this.appName,\n      exe: this.appName + \".exe\",\n      setupExe: setupExeName,\n      title: this.appName,\n      appDirectory: appOutDir,\n      outputDirectory: installerOutDir,\n      version: this.metadata.version,\n      description: smarten(this.metadata.description),\n      authors: this.metadata.author.name,\n      iconUrl: iconUrl,\n      setupIcon: await this.iconPath,\n      certificateFile: cscInfo == null ? null : cscInfo.file,\n      certificatePassword: cscInfo == null ? null : cscInfo.password,\n      fixUpPaths: false,\n      skipUpdateIcon: true,\n      usePackageJson: false,\n      extraMetadataSpecs: projectUrl == null ? null : `\\n    <projectUrl>${projectUrl}</projectUrl>`,\n      copyright: packOptions[\"app-copyright\"],\n      packageCompressionLevel: this.devMetadata.build.compression === \"store\" ? 0 : 9,\n      sign: {\n        name: this.appName,\n        site: projectUrl,\n        overwrite: true,\n        hash: this.customBuildOptions.signingHashAlgorithms,\n      },\n      rcedit: rceditOptions,\n    }, this.customBuildOptions)\n\n    if (!(\"loadingGif\" in options)) {\n      const resourceList = await this.resourceList\n      if (resourceList.includes(\"install-spinner.gif\")) {\n        options.loadingGif = path.join(this.buildResourcesDir, \"install-spinner.gif\")\n      }\n    }\n\n    return options\n  }\n\n  protected async packageInDistributableFormat(appOutDir: string, installerOutDir: string, arch: Arch, packOptions: ElectronPackagerOptions): Promise<any> {\n    const winstaller = require(\"electron-winstaller-fixed\")\n    const version = this.metadata.version\n    const archSuffix = getArchSuffix(arch)\n    const setupExeName = `${this.appName} Setup ${version}${archSuffix}.exe`\n\n    const distOptions = await this.computeEffectiveDistOptions(appOutDir, installerOutDir, packOptions, setupExeName)\n    await winstaller.createWindowsInstaller(distOptions)\n    this.dispatchArtifactCreated(path.join(installerOutDir, setupExeName), `${this.metadata.name}-Setup-${version}${archSuffix}.exe`)\n\n    const packagePrefix = `${this.metadata.name}-${winstaller.convertVersion(version)}-`\n    this.dispatchArtifactCreated(path.join(installerOutDir, `${packagePrefix}full.nupkg`))\n    if (distOptions.remoteReleases != null) {\n      this.dispatchArtifactCreated(path.join(installerOutDir, `${packagePrefix}delta.nupkg`))\n    }\n\n    this.dispatchArtifactCreated(path.join(installerOutDir, \"RELEASES\"))\n  }\n}\n\nasync function checkIcon(file: string): Promise<void> {\n  const fd = await open(file, \"r\")\n  const buffer = new Buffer(512)\n  try {\n    await read(fd, buffer, 0, buffer.length, 0)\n  }\n  finally {\n    await close(fd)\n  }\n\n  if (!isIco(buffer)) {\n    throw new Error(`Windows icon is not valid ico file, please fix \"${file}\"`)\n  }\n\n  const sizes = parseIco(buffer)\n  for (let size of sizes) {\n    if (size!.w >= 256 && size!.h >= 256) {\n      return\n    }\n  }\n\n  throw new Error(`Windows icon size must be at least 256x256, please fix \"${file}\"`)\n}\n\ninterface Size {\n  w: number\n  h: number\n}\n\nfunction parseIco(buffer: Buffer): Array<Size> {\n  if (!isIco(buffer)) {\n    throw new Error(\"buffer is not ico\")\n  }\n\n  const n = buffer.readUInt16LE(4)\n  const result = new Array<Size>(n)\n  for (let i = 0; i < n; i++) {\n    result[i] = {\n      w: buffer.readUInt8(6 + i * 16) || 256,\n      h: buffer.readUInt8(7 + i * 16) || 256,\n    }\n  }\n  return result\n}\n\nfunction isIco(buffer: Buffer): boolean {\n  return buffer.readUInt16LE(0) === 0 && buffer.readUInt16LE(2) === 1\n}\n\nexport function computeDistOut(outDir: string, arch: Arch): string {\n  return path.join(outDir, `win${getArchSuffix(arch)}`)\n}\n\nfunction checkConflictingOptions(options: any) {\n  for (let name of [\"outputDirectory\", \"appDirectory\", \"exe\", \"fixUpPaths\", \"usePackageJson\", \"extraFileSpecs\", \"extraMetadataSpecs\", \"skipUpdateIcon\", \"setupExe\"]) {\n    if (name in options) {\n      throw new Error(`Option ${name} is ignored, do not specify it.`)\n    }\n  }\n\n  if (\"noMsi\" in options) {\n    warn(`noMsi is deprecated, please specify as \"msi\": true if you want to create an MSI installer`)\n    options.msi = !options.noMsi\n  }\n\n  const msi = options.msi\n  if (msi != null && typeof msi !== \"boolean\") {\n    throw new Error(`msi expected to be boolean value, but string '\"${msi}\"' was specified`)\n  }\n}"
  ]
}
