{
  "version": 3,
  "file": "osxPackager.js",
  "sourceRoot": "",
  "sources": [
    "../src/osxPackager.ts"
  ],
  "names": [],
  "mappings": ";;AAAA,mCAA4C,AAAoB,AAChE,AAAC;AAAD,2BAA2D,AAAY,AACvE,AAAC;AAAD,MAAY,AAAI,eAAM,AAAM,AAC5B,AAAC;AAAD,2BAA2C,AAAU,AACrD,AAAC;AAAD,uBAA6C,AAAQ,AACrD,AAAC;AAAD,2BAAsF,AAAY,AAClG,AAAC;AAAD,MAAO,AAAU,qBAAW,AAAa,AAAC;AAC1C,uCAAsE,AAAsB,AAC5F,AAAC;AAAD,6BAAwB,AAAY,AAEpC,AAAmC,AACnC,AAAC;;AAAD,MAAM,AAAS,YAAG,AAAO,QAAC,AAAW,AAAC;AAEtC,0BAAyC,mBAAgB;AAKvD,gBAAY,AAAe,MAAE,AAAuC;AAClE,cAAM,AAAI,AAAC;AAEX,AAAE,AAAC,YAAC,AAAI,KAAC,AAAO,QAAC,AAAO,WAAI,AAAI,QAAI,AAAI,KAAC,AAAO,QAAC,AAAc,kBAAI,AAAI,AAAC,MAAC,AAAC;AACxE,kBAAM,AAAY,eAAG,WAAoB,AAAE;AAC3C,AAAY,yBAAC,AAAI,KAAC,MAAM,WAAc,eAAC,AAAY,AAAC,AAAC;AACrD,AAAI,iBAAC,AAAe,kBAAG,WAAc,eAAC,AAAY,cAAE,AAAI,KAAC,AAAO,QAAC,AAAO,SAAE,AAAI,KAAC,AAAO,QAAC,AAAc,gBAAE,AAAI,KAAC,AAAO,QAAC,AAAgB,kBAAE,AAAI,KAAC,AAAO,QAAC,AAAuB,yBAAE,AAAI,KAAC,AAAO,QAAC,AAAO,AAAC,AACnM;AAAC,AACD,AAAI,eAAC,AAAC;AACJ,AAAI,iBAAC,AAAe,kBAAG,WAAe,QAAC,AAAO,QAAC,AAAI,AAAC,AACtD;AAAC;AAED,AAAI,aAAC,AAAY,eAAG,aAAO,QAAC,AAAI,KAAC,AAAiB,AAAC,AACrD;AAAC;AAED,QAAI,AAAQ;AACV,AAAM,eAAC,WAAQ,SAAC,AAAG,AACrB;AAAC;AAED,QAAc,AAAgB;AAC5B,AAAM,eAAC,CAAC,AAAK,OAAE,AAAK,AAAC,AACvB;AAAC;AAEK,AAAI,SAAC,AAAc,QAAE,AAAY,MAAE,AAAmC;;AAC1E,kBAAM,AAAW,cAAG,AAAI,KAAC,AAAkB,mBAAC,AAAM,QAAE,AAAI,AAAC;AACzD,gBAAI,AAAa,gBAAwB,AAAI;AAC7C,AAAE,AAAC,gBAAC,AAAI,KAAC,AAAO,QAAC,AAAM,SAAG,AAAC,KAAI,AAAI,KAAC,AAAO,QAAC,AAAC,AAAC,OAAK,AAAK,AAAC,OAAC,AAAC;AACzD,sBAAM,AAAS,YAAG,AAAI,KAAC,AAAgB,iBAAC,AAAM,QAAE,AAAI,AAAC;AACrD,AAAa,gCAAG,AAAI,KAAC,AAAM,OAAC,AAAW,aAAE,AAAM,QAAE,AAAS,WAAE,AAAI,MAAE,AAAI,KAAC,AAAkB,AAAC,oBACvF,AAAI,KAAC,MAAM,AAAI,KAAC,AAAI,KAAC,AAAS,WAAE,AAAI,AAAC,AAAC,OACtC,AAAI,KAAC,MAAM,AAAc,eAAC,AAAI,KAAC,AAAI,KAAC,AAA4B,6BAAC,AAAM,QAAE,AAAS,WAAE,AAAI,AAAC,AAAC,AAAC,AAChG;AAAC;AAED,AAAE,AAAC,gBAAC,AAAI,KAAC,AAAO,QAAC,AAAQ,QAAC,AAAK,AAAC,AAAC,eAAC,AAAC,AACjC,AAA6B;;AAC7B,sBAAM,AAAS,YAAG,AAAI,KAAC,AAAI,KAAC,AAAM,QAAE,IAAG,AAAI,KAAC,AAAO,iBAAQ,AAAI,MAAE,AAAC;AAClE,sBAAM,AAAe,kBAAG,AAAU,WAAC,AAAE,IAAE,AAAI,KAAC,AAAkB,oBAAQ,AAAI,KAAC,AAAW,YAAC,AAAM,MAAC,AAAK,AAAC,AAAC;AACrG,sBAAM,AAAI,KAAC,AAAM,OAAC,AAAM,OAAC,AAAM,OAAC,AAAE,IAAE,AAAW,aAAE,EAAC,AAAQ,UAAE,AAAK,OAAE,AAAU,YAAE,AAAK,AAAC,AAAC,UAAE,AAAM,QAAE,AAAS,WAAE,AAAI,MAAE,AAAe,AAAC;AACjI,sBAAM,AAAI,KAAC,AAAI,KAAC,AAAS,WAAE,AAAe,AAAC,AAC7C;AAAC;AAED,AAAE,AAAC,gBAAC,AAAa,iBAAI,AAAI,AAAC,MAAC,AAAC;AAC1B,sBAAM,AAAa,AACrB;AAAC,AACH;AAAC;AAAA;AAEa,AAAI,SAAC,AAAiB,WAAE,AAAkC;;AACtE,gBAAI,AAAe,kBAAG,MAAM,AAAI,KAAC,AAAe;AAChD,AAAE,AAAC,gBAAC,AAAe,mBAAI,AAAI,AAAC,MAAC,AAAC;AAC5B,AAAe;AACb,AAAI,0BAAE,AAAI,KAAC,AAAO,QAAC,AAAI,QAAI,AAAO,QAAC,AAAG,IAAC,AAAQ,YAAI,AAAI,KAAC,AAAkB,mBAAC,AAAQ;AACnF,AAAa,mCAAE,AAAI,KAAC,AAAO,QAAC,AAAI,QAAI,AAAO,QAAC,AAAG,IAAC,AAAkB,AAAI,uBAAC,AAAU,cAAI,AAAI,OAAG,AAAI,OAAG,AAAU,WAAC,AAAQ,AAAC,AACxH,AACH;AAJoB;AAInB;AAED,kBAAM,AAAQ,WAAG,AAAe,gBAAC,AAAI;AACrC,AAAE,AAAC,gBAAgB,AAAQ,YAAI,AAAI,AAAC,MAAC,AAAC;AACpC,sBAAM,AAAO,UAAG,AAAwI;AACxJ,AAAE,AAAC,oBAAC,AAAU,cAAI,AAAI,AAAC,MAAC,AAAC;AACvB,0BAAM,IAAI,AAAK,MAAC,AAAO,AAAC,AAC1B;AAAC;AACD,uBAAI,KAAC,AAAO,AAAC;AACb,AAAM,AACR;AAAC;AAED,mBAAG,IAAC,2BAA0B,AAAQ,UAAG,AAAC;AAE1C,kBAAM,AAAe;AACnB,AAAG,qBAAE,AAAI,KAAC,AAAI,KAAC,AAAS,WAAE,AAAI,KAAC,AAAO,UAAG,AAAM,AAAC;AAChD,AAAQ,0BAAE,AAAU,cAAI,AAAI,OAAG,AAAQ,WAAG,AAAK,AAChD;AAHwC;AAIzC,AAAE,AAAC,gBAAC,AAAe,gBAAC,AAAY,gBAAI,AAAI,AAAC,MAAC,AAAC;AACzC,AAAe,gCAAC,AAAQ,WAAG,AAAe,gBAAC,AAAY,AACzD;AAAC;AAED,kBAAM,AAAW,qBAAU,AAAM;AAC/B,AAAQ,0BAAE,AAAQ,AACnB;AAFiC,aAAd,AAAM,EAEjB,AAAI,KAAC,AAAW,YAAC,AAAM,MAAC,AAAU,AAAC,aAAE,AAAe,AAAC;AAE9D,kBAAM,AAAY,eAAG,MAAM,AAAI,KAAC,AAAY;AAE5C,kBAAM,AAAiB,oBAAG,AAAU,cAAI,AAAI,KAAC,AAAkB;AAC/D,AAAE,AAAC,gBAAC,AAAiB,kBAAC,AAAY,gBAAI,AAAI,AAAC,MAAC,AAAC;AAC3C,AAAW,4BAAC,AAAY,eAAG,AAAiB,kBAAC,AAAY,AAC3D;AAAC,AACD,AAAI,mBAAC,AAAC;AACJ,sBAAM,AAAC,IAAG,IAAG,AAAU,cAAI,AAAI,OAAG,AAAK,QAAG,AAAK,OAAe;AAC9D,AAAE,AAAC,oBAAC,AAAY,aAAC,AAAQ,QAAC,AAAC,AAAC,AAAC,WAAC,AAAC;AAC7B,AAAW,gCAAC,AAAY,eAAG,AAAI,KAAC,AAAI,KAAC,AAAI,KAAC,AAAiB,mBAAE,AAAC,AAAC,AACjE;AAAC,AACH;AAAC;AAED,AAAE,AAAC,gBAAC,AAAiB,kBAAC,AAAmB,uBAAI,AAAI,AAAC,MAAC,AAAC;AAClD,AAAW,4BAAC,AAAsB,AAAC,0BAAG,AAAiB,kBAAC,AAAmB,AAC7E;AAAC,AACD,AAAI,mBAAC,AAAC;AACJ,sBAAM,AAAC,IAAG,IAAG,AAAU,cAAI,AAAI,OAAG,AAAK,QAAG,AAAK,OAAuB;AACtE,AAAE,AAAC,oBAAC,AAAY,aAAC,AAAQ,QAAC,AAAC,AAAC,AAAC,WAAC,AAAC;AAC7B,AAAW,gCAAC,AAAsB,AAAC,0BAAG,AAAI,KAAC,AAAI,KAAC,AAAI,KAAC,AAAiB,mBAAE,AAAC,AAAC,AAC5E;AAAC,AACH;AAAC;AAED,kBAAM,AAAI,KAAC,AAAM,OAAC,AAAW,AAAC;AAE9B,AAAE,AAAC,gBAAC,AAAU,cAAI,AAAI,AAAC,MAAC,AAAC;AACvB,sBAAM,AAAiB,oBAAG,AAAe,gBAAC,AAAa;AACvD,AAAE,AAAC,oBAAC,AAAiB,qBAAI,AAAI,AAAC,MAAC,AAAC;AAC9B,0BAAM,IAAI,AAAK,MAAC,AAAmG,AAAC,AACtH;AAAC;AAED,sBAAM,AAAG,MAAG,AAAI,KAAC,AAAI,KAAC,AAAS,WAAE,IAAG,AAAI,KAAC,AAAO,aAAI,AAAI,KAAC,AAAQ,SAAC,AAAO,SAAM,AAAC;AAChF,sBAAM,AAAI,KAAC,AAAM,cAAQ,AAAM;AAC7B,AAAG,yBAAE,AAAG;AACR,AAAQ,8BAAE,AAAiB,AAC5B;AAH+B,iBAAd,AAAM,EAGrB,AAAe,AAAC,AAAC;AACpB,AAAI,qBAAC,AAAuB,wBAAC,AAAG,KAAE,IAAG,AAAI,KAAC,AAAQ,SAAC,AAAI,UAAI,AAAI,KAAC,AAAQ,SAAC,AAAO,SAAM,AAAC,AACzF;AAAC,AACH;AAAC;AAAA;AAEe,AAAM,WAAC,AAAiB;;AACtC,AAAM,mBAAC,WAAe,QAAC,AAAS,UAAC,uBAAI,AAAC,MAAC,AAAI,AAAC,AAC9C;AAAC;AAAA;AAEe,AAAM,WAAC,AAAiB;;AACtC,AAAM,mBAAC,WAAe,QAAC,AAAS,UAAC,uBAAI,AAAC,MAAC,AAAI,AAAC,AAC9C;AAAC;AAAA;AAEe,AAA2B,gCAAC,AAAiB;;AAC3D,kBAAM,AAAa;AACjB,AAAK,uBAAE,AAAI,KAAC,AAAO;AACnB,AAAI,sBAAE,AAAI,KAAC,AAAI,KAAC,AAAI,KAAC,AAAiB,mBAAE,AAAW,AAAC;AACpD,AAAW,6BAAE,AAAE;AACf,AAAQ;AAEJ,AAAG,yBAAE,AAAG,KAAE,AAAG,KAAE,AAAG,KAAE,AAAM,QAAE,AAAM,QAAE,AAAM,QAAE,AAAe,AAC5D;AAFD,iBADQ;AAKN,AAAG,yBAAE,AAAG,KAAE,AAAG,KAAE,AAAG,KAAE,AAAM,QAAE,AAAM,AACnC,AACF;AAHC;AAIF,AAAM,wBAAE,AAAI,KAAC,AAAW,YAAC,AAAK,MAAC,AAAW,gBAAK,AAAO,UAAG,AAAM,SAAG,AAAM,AACzE;AAbsD,aAAX,AAAU,EAanD,AAAI,KAAC,AAAkB,AAAC;AAE3B,AAAE,AAAC,gBAAC,AAAC,EAAC,AAAY,gBAAI,AAAI,KAAC,AAAkB,AAAC,AAAC,qBAAC,AAAC;AAC/C,sBAAM,AAAU,aAAG,AAAI,KAAC,AAAI,KAAC,AAAI,KAAC,AAAiB,mBAAE,AAAgB,AAAC;AACtE,sBAAM,AAAI,OAAG,MAAM,OAAU,WAAC,AAAU,AAAC;AACzC,AAAE,AAAC,oBAAC,AAAI,QAAI,AAAI,QAAI,AAAI,KAAC,AAAM,AAAE,AAAC,UAAC,AAAC;AAClC,AAAa,kCAAC,AAAU,aAAG,AAAU,AACvC;AAAC,AACH;AAAC;AAED,AAAa,0BAAC,AAAQ,SAAC,AAAC,AAAC,GAAC,AAAI,OAAG,AAAI,KAAC,AAAI,KAAC,AAAS,WAAE,AAAI,KAAC,AAAO,UAAG,AAAM,AAAC;AAC5E,AAAM,mBAAC,AAAa,AACtB;AAAC;AAAA;AAED,AAA4B,iCAAC,AAAc,QAAE,AAAiB,WAAE,AAAY;AAC1E,cAAM,AAAQ,WAAwB,AAAE;AAExC,AAAE,AAAC,YAAC,AAAI,KAAC,AAAO,QAAC,AAAQ,QAAC,AAAK,AAAC,iBAAI,AAAI,KAAC,AAAO,QAAC,AAAQ,QAAC,AAAS,AAAC,AAAC,mBAAC,AAAC;AACrE,kBAAM,AAAY,eAAG,AAAI,KAAC,AAAI,KAAC,AAAS,WAAE,IAAG,AAAI,KAAC,AAAO,aAAI,AAAI,KAAC,AAAQ,SAAC,AAAO,SAAM,AAAC;AACzF,AAAQ,qBAAC,AAAI,SAAK,WAAe,QAAM,CAAM,AAAO,SAAE,AAAM;AAC1D,uBAAG,IAAC,AAAc,AAAC;AACnB,sBAAM,AAAU;AACd,AAAM,4BAAE,AAAY;AACpB,AAAQ,8BAAE,AAAI,KAAC,AAAU;AACzB,AAAa,mCAAE,MAAM,AAAI,KAAC,AAA2B,4BAAC,AAAS,AAAC,AACjE;AAJkB;AAMnB,AAAE,AAAC,oBAAC,OAAK,MAAC,AAAO,AAAC,SAAC,AAAC;AAClB,2BAAK,MAAC,YAAW,AAAI,KAAC,AAAS,UAAC,AAAU,YAAO,AAAI,MAAE,AAAC,AAAC,IAAE,AAAC,AAC9D;AAAC;AAED,sBAAM,AAAO,UAAG,AAAO,QAAC,AAAQ,AAAC,UAAC,AAAU,AAAC;AAC7C,AAAO,wBAAC,AAAE,GAAC,AAAO,SAAE,AAAM,AAAC;AAC3B,AAAO,wBAAC,AAAE,GAAC,AAAQ,UAAE,MAAM,AAAO,AAAE,AAAC;AACrC,AAAE,AAAC,oBAAC,OAAK,MAAC,AAAO,AAAC,SAAC,AAAC;AAClB,AAAO,4BAAC,AAAE,GAAC,AAAU,YAAG,AAAS,IAAV;AACrB,AAAE,AAAC,4BAAC,AAAI,KAAC,AAAI,SAAK,AAAY,AAAC,cAAC,AAAC;AAC/B,mCAAK,MAAC,aAAY,AAAI,KAAC,AAAO,cAAK,AAAI,KAAC,AAAK,OAAE,AAAC,AAClD;AAAC,AACH;AAAC,AAAC,AACJ;AAAC,AACH;AAAC,AAAC,cAtBY,EAuBX,AAAI,KAAC,MAAM,AAAI,KAAC,AAAuB,wBAAC,AAAY,cAAE,IAAG,AAAI,KAAC,AAAQ,SAAC,AAAI,UAAI,AAAI,KAAC,AAAQ,SAAC,AAAO,SAAM,AAAC,AAAC,AAAC,AAClH;AAAC;AAED,AAAG,AAAC,aAAC,IAAI,AAAM,UAAI,AAAI,KAAC,AAAO,AAAC,SAAC,AAAC;AAChC,AAAE,AAAC,gBAAC,AAAM,WAAK,AAAK,SAAI,AAAM,WAAK,AAAK,AAAC,OAAC,AAAC;AACzC,sBAAM,AAAM,SAAG,AAAM,WAAK,AAAS,YAAG,AAAK,QAAG,AAAO;AACrD,uBAAG,IAAC,AAAgB,mBAAG,AAAM,AAAC,AAC9B,AAA4D;;AAC5D,sBAAM,AAAU,aAAG,AAAM,WAAK,AAAS,YAAG,AAAK,QAAG,AAAK,AACvD,AAA4F;;AAC5F,sBAAM,AAAO,UAAG,AAAI,KAAC,AAAI,KAAC,AAAS,WAAE,IAAG,AAAI,KAAC,AAAO,aAAI,AAAI,KAAC,AAAQ,SAAC,AAAO,aAAI,AAAU,gBAAI,AAAM,QAAE,AAAC;AACxG,AAAQ,yBAAC,AAAI,KAAC,AAAI,KAAC,AAAU,WAAC,AAAM,QAAE,AAAS,WAAE,AAAO,AAAC,SACtD,AAAI,KAAC,MAAM,AAAI,KAAC,AAAuB,wBAAC,AAAO,SAAE,IAAG,AAAI,KAAC,AAAQ,SAAC,AAAI,UAAI,AAAI,KAAC,AAAQ,SAAC,AAAO,aAAI,AAAU,gBAAI,AAAM,QAAE,AAAC,AAAC,AAAC,AACjI;AAAC,AACH;AAAC;AACD,AAAM,eAAC,WAAe,QAAC,AAAG,IAAC,AAAQ,AAAC,AACtC;AAAC,AACH,AAAC;;AA7MD;kBA6MC",
  "sourcesContent": [
    "import { PlatformPackager, BuildInfo } from \"./platformPackager\"\nimport { Platform, OsXBuildOptions, MasBuildOptions } from \"./metadata\"\nimport * as path from \"path\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport { log, debug, statOrNull, warn } from \"./util\"\nimport { createKeychain, deleteKeychain, CodeSigningInfo, generateKeychainName } from \"./codeSign\"\nimport deepAssign = require(\"deep-assign\")\nimport { sign, flat, BaseSignOptions, SignOptions, FlatOptions } from \"electron-osx-sign-tf\"\nimport { readdir } from \"fs-extra-p\"\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"./awaiter\")\n\nexport default class OsXPackager extends PlatformPackager<OsXBuildOptions> {\n  codeSigningInfo: Promise<CodeSigningInfo | null>\n\n  readonly resourceList: Promise<Array<string>>\n\n  constructor(info: BuildInfo, cleanupTasks: Array<() => Promise<any>>) {\n    super(info)\n\n    if (this.options.cscLink != null && this.options.cscKeyPassword != null) {\n      const keychainName = generateKeychainName()\n      cleanupTasks.push(() => deleteKeychain(keychainName))\n      this.codeSigningInfo = createKeychain(keychainName, this.options.cscLink, this.options.cscKeyPassword, this.options.cscInstallerLink, this.options.cscInstallerKeyPassword, this.options.csaLink)\n    }\n    else {\n      this.codeSigningInfo = BluebirdPromise.resolve(null)\n    }\n\n    this.resourceList = readdir(this.buildResourcesDir)\n  }\n\n  get platform() {\n    return Platform.OSX\n  }\n\n  protected get supportedTargets(): Array<string> {\n    return [\"dmg\", \"mas\"]\n  }\n\n  async pack(outDir: string, arch: string, postAsyncTasks: Array<Promise<any>>): Promise<any> {\n    const packOptions = this.computePackOptions(outDir, arch)\n    let nonMasPromise: Promise<any> | null = null\n    if (this.targets.length > 1 || this.targets[0] !== \"mas\") {\n      const appOutDir = this.computeAppOutDir(outDir, arch)\n      nonMasPromise = this.doPack(packOptions, outDir, appOutDir, arch, this.customBuildOptions)\n        .then(() => this.sign(appOutDir, null))\n        .then(() => postAsyncTasks.push(this.packageInDistributableFormat(outDir, appOutDir, arch)))\n    }\n\n    if (this.targets.includes(\"mas\")) {\n      // osx-sign - disable warning\n      const appOutDir = path.join(outDir, `${this.appName}-mas-${arch}`)\n      const masBuildOptions = deepAssign({}, this.customBuildOptions, (<any>this.devMetadata.build)[\"mas\"])\n      await this.doPack(Object.assign({}, packOptions, {platform: \"mas\", \"osx-sign\": false}), outDir, appOutDir, arch, masBuildOptions)\n      await this.sign(appOutDir, masBuildOptions)\n    }\n\n    if (nonMasPromise != null) {\n      await nonMasPromise\n    }\n  }\n\n  private async sign(appOutDir: string, masOptions: MasBuildOptions | null): Promise<void> {\n    let codeSigningInfo = await this.codeSigningInfo\n    if (codeSigningInfo == null) {\n      codeSigningInfo = {\n        name: this.options.sign || process.env.CSC_NAME || this.customBuildOptions.identity,\n        installerName: this.options.sign || process.env.CSC_INSTALLER_NAME || (masOptions == null ? null : masOptions.identity),\n      }\n    }\n\n    const identity = codeSigningInfo.name\n    if (<string | null>identity == null) {\n      const message = \"App is not signed: CSC_LINK or CSC_NAME are not specified, see https://github.com/electron-userland/electron-builder/wiki/Code-Signing\"\n      if (masOptions != null) {\n        throw new Error(message)\n      }\n      warn(message)\n      return\n    }\n\n    log(`Signing app (identity: ${identity})`)\n\n    const baseSignOptions: BaseSignOptions = {\n      app: path.join(appOutDir, this.appName + \".app\"),\n      platform: masOptions == null ? \"darwin\" : \"mas\"\n    }\n    if (codeSigningInfo.keychainName != null) {\n      baseSignOptions.keychain = codeSigningInfo.keychainName\n    }\n\n    const signOptions = Object.assign({\n      identity: identity,\n    }, (<any>this.devMetadata.build)[\"osx-sign\"], baseSignOptions)\n\n    const resourceList = await this.resourceList\n\n    const customSignOptions = masOptions || this.customBuildOptions\n    if (customSignOptions.entitlements != null) {\n      signOptions.entitlements = customSignOptions.entitlements\n    }\n    else {\n      const p = `${masOptions == null ? \"osx\" : \"mas\"}.entitlements`\n      if (resourceList.includes(p)) {\n        signOptions.entitlements = path.join(this.buildResourcesDir, p)\n      }\n    }\n\n    if (customSignOptions.entitlementsInherit != null) {\n      signOptions[\"entitlements-inherit\"] = customSignOptions.entitlementsInherit\n    }\n    else {\n      const p = `${masOptions == null ? \"osx\" : \"mas\"}.inherit.entitlements`\n      if (resourceList.includes(p)) {\n        signOptions[\"entitlements-inherit\"] = path.join(this.buildResourcesDir, p)\n      }\n    }\n\n    await this.doSign(signOptions)\n\n    if (masOptions != null) {\n      const installerIdentity = codeSigningInfo.installerName\n      if (installerIdentity == null) {\n        throw new Error(\"Signing is required for mas builds but CSC_INSTALLER_LINK or CSC_INSTALLER_NAME are not specified\")\n      }\n\n      const pkg = path.join(appOutDir, `${this.appName}-${this.metadata.version}.pkg`)\n      await this.doFlat(Object.assign({\n        pkg: pkg,\n        identity: installerIdentity,\n      }, baseSignOptions))\n      this.dispatchArtifactCreated(pkg, `${this.metadata.name}-${this.metadata.version}.pkg`)\n    }\n  }\n\n  protected async doSign(opts: SignOptions): Promise<any> {\n    return BluebirdPromise.promisify(sign)(opts)\n  }\n\n  protected async doFlat(opts: FlatOptions): Promise<any> {\n    return BluebirdPromise.promisify(flat)(opts)\n  }\n\n  protected async computeEffectiveDistOptions(appOutDir: string): Promise<appdmg.Specification> {\n    const specification: appdmg.Specification = deepAssign({\n      title: this.appName,\n      icon: path.join(this.buildResourcesDir, \"icon.icns\"),\n      \"icon-size\": 80,\n      contents: [\n        {\n          \"x\": 410, \"y\": 220, \"type\": \"link\", \"path\": \"/Applications\"\n        },\n        {\n          \"x\": 130, \"y\": 220, \"type\": \"file\"\n        }\n      ],\n      format: this.devMetadata.build.compression === \"store\" ? \"UDRO\" : \"UDBZ\",\n    }, this.customBuildOptions)\n\n    if (!(\"background\" in this.customBuildOptions)) {\n      const background = path.join(this.buildResourcesDir, \"background.png\")\n      const info = await statOrNull(background)\n      if (info != null && info.isFile()) {\n        specification.background = background\n      }\n    }\n\n    specification.contents[1].path = path.join(appOutDir, this.appName + \".app\")\n    return specification\n  }\n\n  packageInDistributableFormat(outDir: string, appOutDir: string, arch: string): Promise<any> {\n    const promises: Array<Promise<any>> = []\n\n    if (this.targets.includes(\"dmg\") || this.targets.includes(\"default\")) {\n      const artifactPath = path.join(appOutDir, `${this.appName}-${this.metadata.version}.dmg`)\n      promises.push(new BluebirdPromise<any>(async(resolve, reject) => {\n        log(\"Creating DMG\")\n        const dmgOptions = {\n          target: artifactPath,\n          basepath: this.projectDir,\n          specification: await this.computeEffectiveDistOptions(appOutDir),\n        }\n\n        if (debug.enabled) {\n          debug(`appdmg: ${JSON.stringify(dmgOptions, <any>null, 2)}`)\n        }\n\n        const emitter = require(\"appdmg\")(dmgOptions)\n        emitter.on(\"error\", reject)\n        emitter.on(\"finish\", () => resolve())\n        if (debug.enabled) {\n          emitter.on(\"progress\", (info: any) => {\n            if (info.type === \"step-begin\") {\n              debug(`appdmg: [${info.current}] ${info.title}`)\n            }\n          })\n        }\n      })\n        .then(() => this.dispatchArtifactCreated(artifactPath, `${this.metadata.name}-${this.metadata.version}.dmg`)))\n    }\n\n    for (let target of this.targets) {\n      if (target !== \"mas\" && target !== \"dmg\") {\n        const format = target === \"default\" ? \"zip\" : target!\n        log(\"Creating OS X \" + format)\n        // for default we use mac to be compatible with Squirrel.Mac\n        const classifier = target === \"default\" ? \"mac\" : \"osx\"\n        // we use app name here - see https://github.com/electron-userland/electron-builder/pull/204\n        const outFile = path.join(appOutDir, `${this.appName}-${this.metadata.version}-${classifier}.${format}`)\n        promises.push(this.archiveApp(format, appOutDir, outFile)\n          .then(() => this.dispatchArtifactCreated(outFile, `${this.metadata.name}-${this.metadata.version}-${classifier}.${format}`)))\n      }\n    }\n    return BluebirdPromise.all(promises)\n  }\n}"
  ]
}
