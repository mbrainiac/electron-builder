{
  "version": 3,
  "file": "build-cli.js",
  "sourceRoot": "",
  "sources": [
    "../src/build-cli.ts"
  ],
  "names": [],
  "mappings": ";;;AAEA,mCAA+C,AAAoB,AACnE,AAAC;AAAD,2BAAmC,AAAY,AAC/C,AAAC;AAAD,0BAAsB,AAAW,AACjC,AAAC;AACD,0BAAkC,AAAW,AAC7C,AAAC;AAAD,MAAO,AAAK,gBAAW,AAAO,AAAC;AAC/B,wBAA0B,AAAO,AACjC,AAAC;AAAD,2BAAyB,AAAY,AAErC,AAAmC,AACnC,AAAC;;AAAD,MAAM,AAAS,YAAG,AAAO,QAAC,AAAW,AAAC;AAatC,MAAM,AAAI,AAAe,aACtB,AAAO,AAAE,UACT,AAAM,OAAC,AAAK;AACX,AAAK,WAAE,AAAG;AACV,AAAQ,cAAE,AAAgB;AAC1B,AAAI,UAAE,AAAO,AACd,AAAC;AAJa,CAFS,AAAK,EAO5B,AAAM,OAAC,AAAO;AACb,AAAK,WAAE,AAAG;AACV,AAAQ,cAAE,AAAiB;AAC3B,AAAI,UAAE,AAAO,AACd,AAAC;AAJe,GAKhB,AAAM,OAAC,AAAK;AACX,AAAK,WAAE,CAAC,AAAG,KAAE,AAAS,AAAC;AACvB,AAAQ,cAAE,AAAmB;AAC7B,AAAI,UAAE,AAAO,AACd,AAAC;AAJa,GAKd,AAAM,OAAC,AAAK;AACX,AAAQ,cAAE,AAAe;AACzB,AAAI,UAAE,AAAS,AAChB,AAAC;AAHa,GAId,AAAM,OAAC,AAAM;AACZ,AAAQ,cAAE,AAAgB;AAC1B,AAAI,UAAE,AAAS,AAChB,AAAC;AAHc,GAIf,AAAM,OAAC,AAAQ;AACd,AAAK,WAAE,AAAG;AACV,AAAQ,cAAE,AAAsB;AAChC,AAAO,aAAE,mBAAa,AACvB,AAAC;AAJgB,GAKjB,AAAM,OAAC,AAAS;AACf,AAAK,WAAE,AAAG;AACV,AAAQ,cAAE,gDAA+C,QAAS,UAAC,AAAuB,AAAC,0BAAE;AAC7F,AAAO,aAAE,CAAC,AAAO,SAAE,AAAc,gBAAE,AAAQ,UAAE,AAAO,AAAC,AACtD,AAAC;AAJiB,GAKlB,AAAM,OAAC,AAAU;AAChB,AAAO,aAAE,CAAC,AAAK,OAAE,AAAK,OAAE,AAAO,SAAE,AAAQ,UAAE,AAAO,SAAE,AAAK,AAAC,AAC3D,AAAC;AAFkB,GAGnB,AAAM,OAAC,AAAM;AACZ,AAAO,aAAE,CAAC,AAAM,QAAE,AAAK,OAAE,AAAK,AAAC,AAChC,AAAC;AAFc,GAGf,AAAM,OAAC,AAAY;AAClB,AAAQ,cAAE,AAAsD;AAChE,AAAO,aAAE,AAAI;AACb,AAAI,UAAE,AAAS,AAChB,AAAC;AAJoB,GAKrB,AAAM,AAAE,SACR,AAAI,AAAE,OACN,AAAM,OAAC,kBAAiB,QAAS,UAAC,AAAuD,AAAC,0DAAE,AAAC,GAC7F,AAAI,AAAC;AAER,MAAM,AAAS,YAAG,WAAkB,mBAAC,AAAI,KAAC,AAAQ,AAAC;AACnD,AAAE,AAAC,IAAC,AAAI,KAAC,AAAG,OAAI,AAAI,QAAI,EAAC,AAAS,UAAC,AAAQ,QAAC,WAAQ,SAAC,AAAG,AAAC,AAAC,cAAC,AAAC;AAC1D,AAAS,cAAC,AAAI,KAAC,WAAQ,SAAC,AAAG,AAAC,AAC9B;AAAC;AACD,AAAE,AAAC,IAAC,AAAI,KAAC,AAAK,SAAI,AAAI,QAAI,EAAC,AAAS,UAAC,AAAQ,QAAC,WAAQ,SAAC,AAAK,AAAC,AAAC,gBAAC,AAAC;AAC9D,AAAS,cAAC,AAAI,KAAC,WAAQ,SAAC,AAAK,AAAC,AAChC;AAAC;AACD,AAAE,AAAC,IAAC,AAAI,KAAC,AAAG,OAAI,AAAI,QAAI,EAAC,AAAS,UAAC,AAAQ,QAAC,WAAQ,SAAC,AAAO,AAAC,AAAC,kBAAC,AAAC;AAC9D,AAAS,cAAC,AAAI,KAAC,WAAQ,SAAC,AAAO,AAAC,AAClC;AAAC;AAED,MAAM,AAAU,aAAG,AAAI,KAAC,AAAI;AAC5B,MAAM,AAAK,QAAG,AAAU,eAAK,AAAK,QAAG,CAAC,AAAM,QAAE,AAAK,AAAC,AAAG,SAAC,AAAU,cAAI,AAAI,OAAG,AAAE,KAAG,CAAC,AAAU,AAAC,AAAC;AAE/F,AAAE,AAAC,IAAC,AAAI,KAAC,AAAG,OAAI,EAAC,AAAK,MAAC,AAAQ,QAAC,AAAK,AAAC,AAAC,gBAAC,AAAC;AACvC,AAAK,UAAC,AAAI,KAAC,AAAK,AAAC,AACnB;AAAC;AACD,AAAE,AAAC,IAAC,AAAI,KAAC,AAAI,QAAI,EAAC,AAAK,MAAC,AAAQ,QAAC,AAAM,AAAC,AAAC,iBAAC,AAAC;AACzC,AAAK,UAAC,AAAI,KAAC,AAAM,AAAC,AACpB;AAAC;AAED,UAAK,aAAQ,AAAM,OAAC,AAAE,IAAE,AAAI;AAC1B,AAAQ,cAAE,AAAS;AACnB,AAAI,UAAE,AAAK,AACZ,AAAC,AAAC;AAH2B,CAAxB,AAAM,GAIT,AAAK,MAAC,UAAiB,AAAC",
  "sourcesContent": [
    "#! /usr/bin/env node\n\nimport { PackagerOptions, commonTargets } from \"./platformPackager\"\nimport { normalizePlatforms } from \"./packager\"\nimport { build } from \"./builder\"\nimport { PublishOptions } from \"./gitHubPublisher\"\nimport { printErrorAndExit } from \"./promise\"\nimport yargs = require(\"yargs\")\nimport { underline } from \"chalk\"\nimport { Platform } from \"./metadata\"\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"./awaiter\")\n\ninterface CliOptions extends PackagerOptions, PublishOptions {\n  osx?: Array<string>\n  linux?: Array<string>\n  win?: Array<string>\n\n  arch?: string\n\n  x64?: boolean\n  ia32?: boolean\n}\n\nconst args = <CliOptions>(yargs\n  .version()\n  .option(\"osx\", {\n    alias: \"o\",\n    describe: \"Build for OS X\",\n    type: \"array\",\n  })\n  .option(\"linux\", {\n    alias: \"l\",\n    describe: \"Build for Linux\",\n    type: \"array\",\n  })\n  .option(\"win\", {\n    alias: [\"w\", \"windows\"],\n    describe: \"Build for Windows\",\n    type: \"array\",\n  })\n  .option(\"x64\", {\n    describe: \"Build for x64\",\n    type: \"boolean\",\n  })\n  .option(\"ia32\", {\n    describe: \"Build for ia32\",\n    type: \"boolean\",\n  })\n  .option(\"target\", {\n    alias: \"t\",\n    describe: \"Target package types\",\n    choices: commonTargets,\n  })\n  .option(\"publish\", {\n    alias: \"p\",\n    describe: `Publish artifacts (to GitHub Releases), see ${underline(\"https://goo.gl/WMlr4n\")}`,\n    choices: [\"onTag\", \"onTagOrDraft\", \"always\", \"never\"],\n  })\n  .option(\"platform\", {\n    choices: [\"osx\", \"win\", \"linux\", \"darwin\", \"win32\", \"all\"],\n  })\n  .option(\"arch\", {\n    choices: [\"ia32\", \"x64\", \"all\"],\n  })\n  .option(\"npmRebuild\", {\n    describe: \"Runs npm rebuild before starting to package the app.\",\n    default: true,\n    type: \"boolean\",\n  })\n  .strict()\n  .help()\n  .epilog(`Project home: ${underline(\"https://github.com/electron-userland/electron-builder\")}`)\n  .argv)\n\nconst platforms = normalizePlatforms(args.platform)\nif (args.osx != null && !platforms.includes(Platform.OSX)) {\n  platforms.push(Platform.OSX)\n}\nif (args.linux != null && !platforms.includes(Platform.LINUX)) {\n  platforms.push(Platform.LINUX)\n}\nif (args.win != null && !platforms.includes(Platform.WINDOWS)) {\n  platforms.push(Platform.WINDOWS)\n}\n\nconst archAsProp = args.arch\nconst archs = archAsProp === \"all\" ? [\"ia32\", \"x64\"] : (archAsProp == null ? [] : [archAsProp])\n\nif (args.x64 && !archs.includes(\"x64\")) {\n  archs.push(\"x64\")\n}\nif (args.ia32 && !archs.includes(\"ia32\")) {\n  archs.push(\"ia32\")\n}\n\nbuild(Object.assign({}, args, {\n  platform: platforms,\n  arch: archs,\n}))\n  .catch(printErrorAndExit)"
  ]
}
