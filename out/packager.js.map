{
  "version": 3,
  "file": "packager.js",
  "sourceRoot": "",
  "sources": [
    "../src/packager.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import * as path from \"path\"\nimport {\n  computeDefaultAppDirectory, installDependencies, log, getElectronVersion, readPackageJson, use, warn,\n  exec\n} from \"./util\"\nimport { all, executeFinally } from \"./promise\"\nimport { EventEmitter } from \"events\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport { InfoRetriever } from \"./repositoryInfo\"\nimport { AppMetadata, DevMetadata, Platform } from \"./metadata\"\nimport { PackagerOptions, PlatformPackager, BuildInfo, ArtifactCreated } from \"./platformPackager\"\nimport OsXPackager from \"./osxPackager\"\nimport { WinPackager } from \"./winPackager\"\nimport * as errorMessages from \"./errorMessages\"\nimport * as util from \"util\"\nimport deepAssign = require(\"deep-assign\")\nimport compareVersions = require(\"compare-versions\")\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"./awaiter\")\n\nfunction addHandler(emitter: EventEmitter, event: string, handler: Function) {\n  emitter.on(event, handler)\n}\n\nexport class Packager implements BuildInfo {\n  readonly projectDir: string\n  appDir: string\n\n  metadata: AppMetadata\n  devMetadata: DevMetadata\n\n  private isTwoPackageJsonProjectLayoutUsed = true\n\n  electronVersion: string\n\n  readonly eventEmitter = new EventEmitter()\n\n  //noinspection JSUnusedGlobalSymbols\n  constructor(public options: PackagerOptions, public repositoryInfo: InfoRetriever | null = null) {\n    this.projectDir = options.projectDir == null ? process.cwd() : path.resolve(options.projectDir)\n  }\n\n  artifactCreated(handler: (event: ArtifactCreated) => void): Packager {\n    addHandler(this.eventEmitter, \"artifactCreated\", handler)\n    return this\n  }\n\n  get devPackageFile(): string {\n    return path.join(this.projectDir, \"package.json\")\n  }\n\n  async build(): Promise<any> {\n    const devPackageFile = this.devPackageFile\n    const platforms = this.options.platform!\n\n    this.devMetadata = deepAssign(await readPackageJson(devPackageFile), this.options.devMetadata)\n    this.appDir = await computeDefaultAppDirectory(this.projectDir, use(this.devMetadata.directories, it => it!.app) || this.options.appDir)\n\n    this.isTwoPackageJsonProjectLayoutUsed = this.appDir !== this.projectDir\n\n    const appPackageFile = this.projectDir === this.appDir ? devPackageFile : path.join(this.appDir, \"package.json\")\n    this.metadata = appPackageFile === devPackageFile ? this.devMetadata : await readPackageJson(appPackageFile)\n    this.checkMetadata(appPackageFile, devPackageFile, platforms)\n    checkConflictingOptions(this.devMetadata.build)\n\n    this.electronVersion = await getElectronVersion(this.devMetadata, devPackageFile)\n\n    const cleanupTasks: Array<() => Promise<any>> = []\n    return executeFinally(this.doBuild(platforms, cleanupTasks), () => all(cleanupTasks.map(it => it())))\n  }\n\n  private async doBuild(platforms: Array<Platform>, cleanupTasks: Array<() => Promise<any>>): Promise<any> {\n    const distTasks: Array<Promise<any>> = []\n    const outDir = path.resolve(this.projectDir, use(this.devMetadata.directories, it => it!.output) || \"dist\")\n\n    // custom packager - don't check wine\n    let checkWine = this.options.platformPackagerFactory == null\n    for (let platform of platforms) {\n      let wineCheck: Promise<Buffer[]> | null = null\n      if (checkWine && process.platform !== \"win32\" && platform === Platform.WINDOWS) {\n        wineCheck = exec(\"wine\", [\"--version\"])\n      }\n\n      const helper = this.createHelper(platform!, cleanupTasks)\n      for (let arch of normalizeArchs(platform!, this.options.arch)) {\n        await this.installAppDependencies(platform!, arch!)\n\n        if (checkWine && wineCheck != null) {\n          checkWine = false\n          checkWineVersion(wineCheck)\n        }\n\n        // electron-packager uses productName in the directory name\n        await helper.pack(outDir, arch!, distTasks)}\n    }\n\n    return await BluebirdPromise.all(distTasks)\n  }\n\n  private createHelper(platform: Platform, cleanupTasks: Array<() => Promise<any>>): PlatformPackager<any> {\n    if (this.options.platformPackagerFactory != null) {\n      return this.options.platformPackagerFactory!(this,  platform, cleanupTasks)\n    }\n\n    switch (platform) {\n      case Platform.OSX:\n      {\n        const helperClass: typeof OsXPackager = require(\"./osxPackager\").default\n        return new helperClass(this, cleanupTasks)\n      }\n\n      case Platform.WINDOWS:\n      {\n        const helperClass: typeof WinPackager = require(\"./winPackager\").WinPackager\n        return new helperClass(this, cleanupTasks)\n      }\n\n      case Platform.LINUX:\n        return new (require(\"./linuxPackager\").LinuxPackager)(this, cleanupTasks)\n\n      default:\n        throw new Error(`Unknown platform: ${platform}`)\n    }\n  }\n\n  private checkMetadata(appPackageFile: string, devAppPackageFile: string, platforms: Array<Platform>): void {\n    const reportError = (missedFieldName: string) => {\n      throw new Error(\"Please specify '\" + missedFieldName + \"' in the application package.json ('\" + appPackageFile + \"')\")\n    }\n\n    const appMetadata = this.metadata\n    if (<any>appMetadata.name == null) {\n      reportError(\"name\")\n    }\n    else if (<any>appMetadata.description == null) {\n      reportError(\"description\")\n    }\n    else if (<any>appMetadata.version == null) {\n      reportError(\"version\")\n    }\n    else if ((<any>appMetadata) !== this.devMetadata) {\n      if ((<any>appMetadata).build != null) {\n        throw new Error(util.format(errorMessages.buildInAppSpecified, appPackageFile, devAppPackageFile))\n      }\n\n      if (this.devMetadata.homepage != null) {\n        warn(\"homepage in the development package.json is deprecated, please move to the application package.json\")\n      }\n      if (this.devMetadata.license != null) {\n        warn(\"license in the development package.json is deprecated, please move to the application package.json\")\n      }\n    }\n\n    if (<any>this.devMetadata.build == null) {\n      throw new Error(util.format(errorMessages.buildIsMissed, devAppPackageFile))\n    }\n    else {\n      const author = appMetadata.author\n      if (<any>author == null) {\n        reportError(\"author\")\n      }\n      else if (this.options.dist && <any>author.email == null && platforms.includes(Platform.LINUX)) {\n        throw new Error(util.format(errorMessages.authorEmailIsMissed, appPackageFile))\n      }\n\n      if ((<any>this.devMetadata.build).name != null) {\n        throw new Error(util.format(errorMessages.nameInBuildSpecified, appPackageFile))\n      }\n    }\n  }\n\n  private installAppDependencies(platform: Platform, arch: string): Promise<any> {\n    if (this.isTwoPackageJsonProjectLayoutUsed) {\n      if (platform.nodeName === process.platform) {\n        return installDependencies(this.appDir, this.electronVersion, arch, \"rebuild\")\n      }\n      else {\n        log(\"Skip app dependencies rebuild because platform is different\")\n      }\n    }\n    else {\n      log(\"Skip app dependencies rebuild because dev and app dependencies are not separated\")\n    }\n\n    return BluebirdPromise.resolve()\n  }\n}\n\nexport function normalizeArchs(platform: Platform, arch?: string | n) {\n  if (platform === Platform.OSX) {\n    return [\"x64\"]\n  }\n  else {\n    return arch == null ? [process.arch] : (arch === \"all\" ? [\"ia32\", \"x64\"] : [arch])\n  }\n}\n\nexport function normalizePlatforms(rawPlatforms: Array<string | Platform> | string | Platform | n): Array<Platform> {\n  const platforms = rawPlatforms == null || Array.isArray(rawPlatforms) ? (<Array<string | Platform | n>>rawPlatforms) : [rawPlatforms]\n  if (<any>platforms == null || platforms.length === 0) {\n    return [Platform.fromString(process.platform)]\n  }\n  else if (platforms[0] === \"all\") {\n    if (process.platform === Platform.OSX.nodeName) {\n      return [Platform.OSX, Platform.LINUX, Platform.WINDOWS]\n    }\n    else if (process.platform === Platform.LINUX.nodeName) {\n      // OS X code sign works only on OS X\n      return [Platform.LINUX, Platform.WINDOWS]\n    }\n    else {\n      return [Platform.WINDOWS]\n    }\n  }\n  else {\n    return platforms.map(it => it instanceof Platform ? it : Platform.fromString(it!))\n  }\n}\n\nfunction checkConflictingOptions(options: any) {\n  for (let name of [\"all\", \"out\", \"tmpdir\", \"version\", \"platform\", \"dir\", \"arch\", \"name\"]) {\n    if (name in options) {\n      throw new Error(`Option ${name} is ignored, do not specify it.`)\n    }\n  }\n}\n\nasync function checkWineVersion(checkPromise: Promise<Buffer[]>) {\n  function wineError(prefix: string): string {\n    return `${prefix}, please see https://github.com/electron-userland/electron-builder/wiki/Multi-Platform-Build#${(process.platform === \"linux\" ? \"linux\" : \"os-x\")}`\n  }\n\n  let wineVersion: string\n  try {\n    wineVersion = (await checkPromise)[0].toString().trim()\n  }\n  catch (e) {\n    if (e.code === \"ENOENT\") {\n      throw new Error(wineError(\"wine is required\"))\n    }\n    else {\n      throw new Error(\"Cannot check wine version: \" + e)\n    }\n  }\n\n  if (wineVersion.startsWith(\"wine-\")) {\n    wineVersion = wineVersion.substring(\"wine-\".length)\n  }\n\n  if (compareVersions(wineVersion, \"1.8\") === -1) {\n    throw new Error(wineError(`wine 1.8+ is required, but your version is ${wineVersion}`))\n  }\n}"
  ]
}
